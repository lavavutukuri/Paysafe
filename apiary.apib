FORMAT: 1A
HOST: https://api.test.paysafe.com/paymenthub

# Payments API 

### Authentication

In order for you to use the Paysafe Payments API, Paysafe must first set you up on their system and provide you with an API key. Your API key looks something like this:

* Key Username – MerchantXYZ
* Key Password – B-tst1-0-51ed39e4-312d02345d3f123120881dff9bb4020a89e8ac44cdfdcecd702151182fdc952272661d290ab2e5849e31bb03deede7e

Note that this is not the same as your Merchant Back Office username and password.
The case-sensitive API key is sent using HTTP Basic Authentication. To use HTTP Basic Authentication, you must send the API key credentials using the Authorization header with every request. The Authorization header is constructed as follows:

- The Key Username and Key Password are combined into a string separated by a colon, e.g.,“Key Username:Key Password”.
- The resulting string literal is then encoded using Base64.
- The authorization method and a space (i.e., “Basic”) are then put before the encoded string.

For example, using the Key Username and Password examples above, the header is formed as follows:

`Authorization: Basic TWVyY2hhbnRYWVo6Qi10c3QxLTAtNTFlZDM5ZTQtMzEyZDAyMzQ1ZDNmMTIzMTIwODgxZGZmOWJiNDAyMGE4OWU4YWM0NGNkZmRjZWNkNzAyMTUxMTgyZmRjOTU yMjcyNjYxZDI5MGFiMmU1ODQ5ZTMxYmIwM2RlZWRlN2U=`

For additional details, please refer to http://en.wikipedia.org/wiki/Basic\_access\_authentication.

### URLs

###### Test URL

In order to test your integration with Paysafe, use the following Test URL:<br>
https://api.test.paysafe.com <br>


For example:<br>
https://api.test.paysafe.com/paymenthub/v1/paymenthandles

###### Production URL

In order to process live requests with Paysafe, use the following Production URL:<br>
https://api.paysafe.com<br>

For example:<br>
https://api.paysafe.com/paymenthub/v1/paymenthandles


### Pagination

In the case where an API GET request returns multiple results, Paysafe returns the first 10 records by default and uses HATEOAS links to provide page navigation. In addition to the default behavior, it is also possible to control the number of results and starting point by passing in query parameters as follows:
|Name   |Description    |
|-------|---------------|
|limit  |This is the total number of records to return. Max = 50. Default = 10.|
|offset |This is the starting position, where 0 is the first record. Default = 0.|
|startDate|This is the start date in UTC. Default = 30 days before the endDate.|
|endDate|This is the end date in UTC. Default = current date and time.|


### Global Invalid Characters

You must not include any of the characters in the following table as values in any of your request parameters. If you do, your request will result in an error.
|Character|HEX|Description|
|---------|-------|---------------|
|"|22|Double quotes (or speech marks)|
|;|3B|Semicolon|
|^|5E|Caret, circumflex|
|*|2A|Asterisk|
|<|3C|Less than (or open angled bracket)|
|/|2F|Slash or divide|
|[|5B|Opening bracket|
|]|5D|Closing bracket|
|\\|5C|Backslash|


### API

The Payments API allows merchants to process transactions using the REST protocol. The protocol uses JSON for all requests and responses.
The following request types are supported:
+ [Payment Handles](#reference/payment-handles)
+ [Payments](#reference/payments)
+ [Settlements](#reference/settlements)
+ [Refunds](#reference/refunds)
+ [Standalone Credits](#reference/standalone-credits)
+ [Original Credits](#reference/original-credits)
+ [Verifications]()
+ [Void Authorization](#reference/void-authorizations)



### Getting Started

Paysafe **'Payments API'** makes integration with multiple payment methods possible via a single endpoint, 
which also simplifies the development effort for a new payment method integration to a bare minimum 
or even none in certain cases.

###### Supported Payment Methods
The following payment methods are currently supported by the Payments API,

- Card
- Skrill
- Neteller
- Paysafecard
- Paysafecash
- Guaranteed ACH
- Sightline Prepaid Card

###### Payment Handle

Payment Handle simplifies the integration with multiple methods by being the logical first step of a payment/credit processing.

A Payment Handle contains the payment details of the customer including (and not limited to) payment method, amount, currency, payment instrument details, customer profile details etc. In addition, Payment Handle also has a status of its own.

Payment Handle object is characterised by additional metadata information listed below, that makes handling multiple payment methods (using a single endpoint) possible.

+ **Action** - Determines the next step of the user journey

   Irrespective of the payment method selected by the customer, a merchant can use this value to determine the next step of the user journey. The possible values are,

   -> *NONE* – No further action is required from the customer. This is typically the case for a non-3DS card where no authentication is required from the customer after having entered valid card details. In this case, merchant can immediately make a Payments call to capture the payment.
   
   -> *REDIRECT* – Customer is required to authorize the payment on a redirected page. Typically the case with 3DS cards where the customer verifies themselves on the bank website. The Payment Handle object will contain the link to which customer needs to be redirected.


   Once customer has completed the journey/authentication as required, the Payment handle will transition to status 'Payable' and the merchant has to make a server to server ‘Payments’ request using the Payment Handle token within 15 minutes to capture the payment. Failing which, the Payment Handle will expire.<br>

+ **Usage** – Specifies whether a Payment Handle can be reused or not



+ **Execution Mode** – Indicates whether the actual payment is expected to be completed immediately or after a time delay



###### Card Scenarios
Use of the Payments API for Card payments/credit requires you to collect cardholder details, such as the card number, expiry date, and CVV/CVC code on your gaming platform/website and send these to Paysafe with your API request.<br>


See the scenarios below describing a number of alternative ways in which merchants can set up card payment/credit processing with Payments API.

* **Scenario 1: One-off Card Payment with Settlement**

This is typically used by merchants who provide immediate delivery of the service without delayed payment capture.<br>


**API to use:** [Payment Handles](#reference/payment-handles) + [Payments](#reference/payments)<br>


In the above scenario, the merchant creates a payment handle and then (once the payment handle has become payable) makes a Payments call to request an authorization with a settlement. The parameter `settleWithAuth` is set to *true*. Once the authorization is made, the funds are immediately requested from the card issuer with the next Paysafe batch settlement run.

* **Scenario 2: Card Payment only**

This is typically used by merchants who obtain authorization for an initial purchase amount and capture payments at a later stage, for example, after fulfillment of the service.<br>


**API to use:** [Payment Handles](#reference/payment-handles) + [Payments](#reference/payments) + [Settlements](#reference/settlements) <br>

In the above scenario, the merchant creates a payment handle and then (once the payment handle has become payable) makes a Payments call to request an initial authorization, with the parameter `settleWithAuth` set to *false*. This enables the merchant to delay issuing the settlement (payment capture) request until the service is fulfilled. The merchant may make one or more partial settlement requests, up to the full amount on the original authorization.

* **Scenario 3: Recurring Payments/Tokenization Service**


* **Scenario 4: Card Standalone Credits**

**API to use:** [Payment Handles](#reference/payment-handles) + [Standalone Credits](#reference/standalone-credits) <br>

In the above scenario, the merchant creates a payment handle and then makes a Standalone Credit request once the payment handle has become 'Payable'.

* **Scenario 5: Card Original Credits**

**API to use:** [Payment Handles](#reference/payment-handles) + [Original Credits](#reference/original-credits)<br>

In the above scenario, the merchant creates a payment handle and then makes a Original Credit request once the payment handle has become 'Payable'.

### Testing Instructions


### Error Summary

# Data Structures

## level2Level3Request (object)
+ level2Level3.exemptLocalTax (boolean)
+ level2Level3.localTaxAmount (number) : `length <=99999999999`  - This is the local sales tax applied to the purchase. 
+ level2Level3.nationalTaxAmount  : `length <=99999999999` - This is the national tax included in the transaction amount.
+ level2Level3.freightAmount (number) : `length <=99999999999` - This is the freight or shipping portion of the total transaction amount.
+ level2Level3.dutyAmount (number) : `length <=99999999999` - This is the duty associated with the import of the purchased goods.
+ level2Level3.destinationZip : `length <=10` - This is the postal/zip code of the address to which the purchased goods will be delivered. This field can be identical to the shipFromZip if the customer is present and takes immediate possession of the goods.
+ level2Level3.destinationCountry : `Size = 2` - This is the country to which the goods are being shipped. See Country Codes.
+ level2Level3.shipFromZip : `length <=10` - This is the postal/zip code of the address from which the purchased goods are being shipped
+ level2Level3.lineItems (array) - This is more detailed information about the items that are being purchased.
    + lineItems.description : `length <=50` - This is a description of the item(s) being purchased.
    + lineItems.productCode : `length <=12` - This is a merchant-defined description code of the item being purchased.
    + lineItems.quantity  : `length =99999999999` - This is the quantity of the item.
    + lineItems.unitAmount : 'length = 100' - This is the tax rate used to calculate the tax amount. For example, if the tax rate is 10.5%, this value should be 10.5.
    + lineItems.taxAmount : `length =99999999999` - This is the amount of any value-added taxes that can be associated with the purchased item, in minor units. The currency will be based on the account setting.Our system will not validate the accuracy of this value. The merchant's application must calculate this value correctly.
    + lineItems.totalAmount : `length =99999999999` - This is the total amount of the line item, typically calculated as price multiplied by quantity, in minor units. The currency will be based on the account setting. Our system will not validate the accuracy of this value. The merchant's application must calculate this value correctly.

## gatewayRequest (object)
+ authCode : `length <= 50` - This is the Authorization code assigned by the issuing bank and returned in the response.
+ avsResponse (enum) - This is the AVS response from the card issuer.
    + MATCH
    + MATCH_ADDRESS_ONLY
    + MATCH_ZIP_ONLY
    + NO_MATCH
    + NOT_PROCESSED
    + UNKNOWN
+ cvvVerification (enum) - This is the response to the cvv submitted with the transaction request.
    + MATCH
    + NO_MATCH
    + NOT_PROCESSED
    + UNKNOWN
+ code -This is acquirer identification code, such as DJN, CRX, etc.
+ responseCode -This is the raw response returned by the acquirer.
+ avsCode -This is the raw AVS code returned by the acquirer.
+ balanceResponse -This is the balance remaining on a gift card, if a gift card was used for the original transaction.
+ mid -This is the acquirer MID that was sent to the clearing house.
+ terminalId -This is the merchant's terminal ID.
+ batchNumber -This is the batch number.
+ seqNumber -This is the merchant's sequence number.
+ effectiveDate -This is the date of the bank deposit associated with the transaction. 
+ financingType -This is the type of financing offered.
+ plan -This is the plan number for this financing transaction.
+ gracePeriod -This is the grace period, in months, associated with deferred payment transactions.
+ term - This is the number of payments, in months, for equal payment transactions.
+ responseId -This is the response ID assigned by Credorax.
+ requestId -This is the request ID assigned by NETBANX.
+ description -This is a description of the response.
+ txnDateTime -This is the transaction date and time.
+ referenceNbr -Bank net transaction Id/Merch Tran Ref
+ responseReasonCode -This is the raw response reason code returned by Credorax.
+ cvv2Result -This is the raw cvv2 result code.

## accordDRequest (object)
+ accordD.finanacingType(enum) - This is the type of financing offered.
    + DEFERRED_PAYMENT – Deferred payment financing
    + EQUAL_PAYMENT – Equal payment financing
+ accordD.plan : `length <=3` - This is the plan number for this financing transaction.
+ accordD.gracePeriod : `length <=99` - This is the grace period, in months, associated with deferred payment transactions.
+ accordD.term : `length <=99` -This is the number of payments, in months, for equal payment transactions.

## recipientAttributes (object)
+ recipient.dateOfBirth (object) - This is the date of birth of the recipient.
    + dateOfBirth.day(number) - This is the day of the dateOfBirth.
    + dateOfBirth.month(number) - This is the month of the dateOfBirth.
    + dateOfBirth.year(number) - This is the year of the dateOfBirth.
+ recipient.zip - This is the ZIP Code of the recipient.
+ recipient.lastName - This is the last name of the recipient.
+ recipient.accountNumber - This is the account number of the recipient.

## splitpayAttributes (object)
+ linkedAccount -This is the ID of the linked account.
+ amount (number) -This is the amount to transfer to the linked account in minor currency units.
+ percent(number) -This is the percentage of the total transaction amount to transfer to that account.

## storedCredentialDetailsAttributes (object)
+ type (enum) - This specifies the type of request being made. Possible values are: 
    + ADHOC – Ad hoc consumer-initiated request.
    + TOPUP – Unscheduled merchant iniitated request when a consumer balance is below a set limit.
    + RECURRING –  Scheduled merchant initiated recurring request.
+ occurrence (enum) - This specifies whether this stored credential request is initial or recurring. Possible values are: 
    + INITIAL – Used when this is the first time the consumer uses this credit card.
    + SUBSEQUENT – Used when the consumer uses this credit card for subsquent requests.

## merchantDescriptorAttributes (object)
+ merchantDescriptor.dynamicDescriptor: `length = 20` - This is a merchant descriptor that will be displayed on a customer’s card statement.
+ merchantDescriptor.phone: `length = 13` - This is the merchant’s phone number, which will be appended to the merchant descriptor on a customer’s card statement.

## acquirerDataAttributes (object)
+ acquirerData.code - This is the code of the acquirer data. Possible values are:
        + CRX (Credorax)
+ acquirerData.authId - This is the auth idof the acquirer data.
+ acquirerData.externalSubMerchantId - This is the external merchant id of the acquirer data.

## errorAttributes (object)
+ error.code -This is the error code.
+ error.internalCode -This is the internal error code.
+ error.message -This is the description of the error.
+ error.riskReasonCode -if applicable The corresponding reason code from the risk system
+ error.details(array) -if applicable This is a collection of detailed description.
+ error.fieldErrors(array) - if applicable This is a list of fields that have issues.
    + field -Field name.
    + error -Error associated with the field name.
+ error.links (array) - if applicable This is a list of links to the related resource
    + rel - Description or relation of the link. Eg: default, self, first, prev, next, last
    + href - The actual URL of the link.

## metadataAttributes (object)
+ key : `length = 50` -This is a description of the data being added to the order.
+ value : `length = 100` - This is the value for the key/value pair.

## authenticationAttributes (object)
+ authentication.id -This is the id of authentication.
+ authentication.eci -This is the eci of authentication.
+ authentication.cavv -This is the cavv of authentication.
+ authentication.xid -This is the xid of authentication.
+ authentication.status -This is the status of authentication.
+ authentication.merchantRefNum -This is the merchantRefNumof authentication.
+ authentication.threeDEnrollment -This is the threeDEnrollmentof authentication.
+ authentication.threeDResult -This is the threeDResultof authentication.
+ authentication.signatureStatus -This is the signatureStatus of authentication.
+ authentication.error (object) -This is the error details of authentication.
    + code -This is the error code.
    + message -This is the description of the error.
    + fieldErrors (object) -This is a list of fields that have issues.
    + field -Field name.
    + error -Error associated with the field name.

## paymentHandleStatusAttributes (enum)
+ INITIATED - This is the initial state once the Payment handle created.
+ PROCESSING - Payment Handle was authorized by customer, awaiting PSP response.
+ PAYABLE - The merchant can proceed next transaction actions (like payments, standalonecredits, originalcredits etc.) using this payment handle.
+ FAILED - The transaction failed, due to either an error or being declined. 
+ EXPIRED - The payment handle got expired due to merchant not proceeding with transaction payments post.
+ COMPLETED - Next transaction (Payments/Standalonecredit/OriginalCredit) call was initiated successfully using the payment Handle.

## statusAttributes (enum)
+ RECEIVED - Our system has received the request and is waiting for the downstream processor’s response.
+ INITIATED - The transaction was initiated with the downstream provider.
+ PENDING - The transaction awaiting PSP response.
+ FAILED - The transaction failed, due to either an error or being declined. 
+ CANCELLED - The authorization request has been fully reversed.
+ EXPIRED - The transaction got expired.
+ COMPLETED - The transaction got completed.

## consumerOperationAttributes(enum)
+ ADD - Consumer wants to save the payment instrument to the profile.
+ EDIT - Consumer wants to edit the payment instrument which is attached to the profile.
+ DELETE - Consumer wants to delete the saved payment instrument from his profile.

## transactionTypeAttributes(enum)
+ PAYMENT - Payment Handle is created to continue the Payment.
+ STANDALONE_CREDIT - Payment Handle is created to continue the standalone credit.
+ ORIGINAL_CREDIT - Payment Handle is created to continue the original credit.
+ VERIFICATION - Payment Handle is created to continue the verification request.

## PaymentHandleRequest (object)

+ id: `length <=36` - This is the ID returned in the response. This ID can be used to retrive the payment handle details using associated GET call.
+ merchantRefNum: `length <= 100` - This is the merchant reference number created by the merchant and submitted as part of the request. It's recommended to provide unique for each request.
+ transactionType (transactionTypeAttributes, required) - This specifies for which transaction type Payment Handle is created.
+ status (paymentHandleStatusAttributes) - This is the status of the payment handle.
+ usage (enum) - Payment handle usage - whether single of multi use
    + SINGLE_USE - The payment handle can be used only once for a transactions (like payments, standalonecredits etc.), it gets expired after due time.
    + MULTI_USE - The payment handle can be used multiple times like recurring/subscription payments.
+ paymentType (enum, required) - The related payment Type/Channel/Method associated with this handle
    + CARD
    + SKRILL
    + NETELLER
    + PAYSAFE_CASH
    + PAYSAFE_CARD
+ action (enum) - The associated action that needs to be done by merchant for this payment handle to make it PAYABLE
    + NONE - No action is required. Typical for card flows without 3DS.
    + REDIRECT - The integration needs to redirect the user to a specific APM for completion of a payment or getting necessary details to complete a payment, or to complete an OAuth registration flow in case of creation of multi use payment handle. Typical for most APMs and 3DS cards.
    + AUTHENTICATE - In case of APMs with deep integrations, this action indicates customer needs to key in an OTP(One Time Password) or a specific code to verify the ownership or authorize a top up. The code is validated against the code received from the APM. This is typically used in APMs that need 2 factor authentication. 
+ executionMode (enum) - Execution mode indicates the kind of interaction that merchant server needs to adhere to complete the transaction (payment/credit)
    + ASYNCHRONOUS - For some payment types the actual payment/credit will differently be completed after some hours or days, where customer has to complete it offline. In this case Merchant has to rely on Webhooks, which will get the Payment success/fail event.
    + SYNCHRONOUS - In case the status of the Transaction (payment/credit) call will be returned to Merchant Synchronously. Example : Cards (with 3DS and without 3DS), Skrill, Neteller, Paysafe Card. In these cases Is it OK for Merchant to poll the PROCESSING/PENDING Payments in a regular intervals.
+ amount: 100 - Max =99999999999 This is the amount of the request, in minor units.
+ currencyCode: CAD - Max = 3 This is the currency of the transaction.
+ paymentHandleToken - The handle token generated by our system which will be used by merchants for next transaction steps.
+ card (object) - These are the details of the card used for the request.
    + cardNum - Min = 8,Max = 20 This is the card number used for the request.
    + cardType (enum) - This will be present in the responce which specifies the type of card provided.
        - AM – American Express
        - DC – Diners Club
        - DI – Discover
        - JC – JCB
        - MC – MasterCard
        - MD – Maestro
        - SF – Swiff
        - SO – Solo
        - VI – Visa
        - VD – Visa Debit
        - VE – Visa Electron
    + lastDigits - Size=4 Last 4 digits of the card number will be sent in the response.
    + cardExpiry - This is the card's expiry date.
        + month - length=2 This is the card expiry month.
        + year - length=4 This is the card expiry year.
    + cvv - Min = 3,Max = 4 This is the 3- or 4-digit security code that appears on the card following the card number.
    + holderName - This is name of the card holder.
    + nickName - This is the nick name of the card holder.
    + cardBin (number) - This is card bin provided in the response.
+ billingDetails - These are the billing details for the request.
 - street: 100 queen - length<=50 This is the first line of the street address in the billing address.
 - street2: unit 201 - length<=50 This is the second line of the street address in the billing address, if required (e.g., apartment number).
 - city: Toronto - length<=40 This is the city in the billing address.
 - zip: MSH 2N2 - length<=10 This is the postal/zip code in the billing address.
 - country: CA - Size = 2
 - state: ON - length<=40 Use the 2-character state or province codes for Canada or the United States.
+ merchantDescriptor - This is the merchant descriptor that will be displayed on the customer's card statement.
    + dynamicDescriptor: Online Store - This is a merchant descriptor that will be displayed on a customer’s card statement. Length = 20
    + phone: 12345678 - This is the merchant’s phone number, which will be appended to the merchant descriptor on a customer’s card statement. Length = 13
+ returnLinks  - The URL endpoint to redirect the consumer to. You can customize the return URL based on the transaction status. 'default' is mandatory.
    + returnLinks.rel(enum) -This is the link type, allowing different endpoints to be targeted depending on the end state of the transaction. The link relation describes how this link relates to the previous call. self will get details of the current call.
        + default - (required) The default return url, will be used if specific status return url is not defined.
        + payment_redirect - Merchant needs to redirect consumer to this url to complete payment.
        + on_completed - Will be returned to this URL if the payment is completed.
        + on_failed - Will be returned to this URL if the payment is failed.
    + returnLinks.href - The actual URL
    + returnLinks.method - The http method
+ customerIp - length<=39 This is the customer's IP address.
+ timeToLiveSeconds: 1212121212 (number) - This is the period of time the single-use token is valid before expiration, in seconds, returned in the response.(Long)


## PaymentsRequest (object)

+  id: `length <=36` read only - This is the ID returned in the response. This ID can be used for future associated requests, e,g., Settlements.
+ merchantRefNum: `length <= 255`(required) - This is the merchant reference number created by the merchant and submitted as part of the request. It's recommended to be unique for a single transaction.
+ amount: 100 - Max =99999999999(required)  This is the amount of the request, in minor units.
+ dupCheck: true (boolean) - This validates that this request is not a duplicate. A request is considered a duplicate if the merchantRefNum has already been used in a previous request within the past 90 days.
+ settleWithAuth: true (boolean) - This indicates whether the request is an Authorization only (no Settlement), or a Purchase (Authorization and Settlement).
        - false - the request is not settled
        - true  - the request is settled
+ preAuth: false  (boolean) - This indicates whether the Authorization request should be sent as a Pre-Authorization.
        - You should use the preAuth element in cases where you are not sure that you can fully settle the Authorization within 4 days. Contact your account manager for more information.
+ partialAuth (object)  -This is the authorization that is approved for an amount lower than the requested amount. The reminder of the amount could be paid by other means.     
    + partialAuth.requested (boolean) -This specifies whether partial auth is requested or not.
    + partialAuth.amountDue (number) -This is the amount for which auth is not provided.
    + partialAuth.orginalAmount (number) -This is the actual amount for which authorization is asked.
+ paymentHandleToken (string, required) - This is the payment handle token.
+ availableToSettle (number) -This is the amount of the Authorization remaining to settle, in minor units.
+ childAccountNum : `length <= 10` -This is the child merchant account number. It is returned only if the transaction was processed via a master account.
+ customerIp - `length<=39` -This is the customer's IP address.
+ description: `length<=255` -This is a description of the transaction, provided by the merchant.
+ status (statusAttributes) - This is the status of the transaction request.
+ currencyCode: CAD - Max = 3 This is the currency of the transaction.
+ level2Level3(level2Level3Request) - This allows merchants who are enabled to provide additional L2/L3 transaction data.
        Not all processing gateways support this parameter. Contact your account manager for more information.
+ gatewayResponse(gatewayRequest) - This is the raw response returned by an acquirer. It is returned only if your account is configured accordingly.
+ accorD(accordDRequest) - These are parameters for financing plans supported for certain merchant configurations.
        Include this element only when instructed to do so by NETBANX.
+ recipient(recipientAttributes) - This is recipient information.
+ riskReasonCode (array) - An array of integers is returned, displaying the detailed risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.
+ splitPay (splitpayAttributes) - NOTE: For splitpay transactions only.
        An array containing the linked accounts and the amount shared with each. You must include either amount or percent. However, you cannot include both values.
+ storedCredential(storedCredentialDetailsAttributes) - The storedCredential object is used to identify authorization requests that use stored credentials for a consumer, in order to improve authorization rates and reduce fraud. Stored credentials can be used in two cases:
Using a payment token – An authorization request that uses a paymentToken from the Customer Vault API.           
Using a card number – An authorization request that uses a credit card number stored by the merchant
+ merchantDescriptor(merchantDescriptorAttributes) - This is the merchant descriptor that will be displayed on the customer's card statement.
        Not all processing gateways support this parameter. Contact your account manager for more information.
+ settlements (array) - This is the list of all settlements. This will be returned only if settleWithAuth=true in the request.
+ error(errorAttributes) - Details of the error.
+ statusReason - This is reason for the status. This is present in case of ERROR, FAILURE, HELD status.
+ authentication(authenticationAttributes) - This is the 3DS authentication details.


## OriginalCreditResponse (object)
+ id: 25f6dadf-176a-415f-95c9-6ff39ff697ba - Read Only, length<=36    This is the ID returned in the response. This ID can be used to retrieve the details with associate GET call.
+ merchantRefNum: P1234 (required) - length<=255 This is the merchant reference number created by the merchant and submitted as part of the request.
+ paymentHandleToken: `length <= 36` - This is the payment handle token returned in Payment Handle response for which credit has to be done.
+ amount: 100 (required) - max=99999999999 This is the amount of the request, in minor units.
+ currencyCode: CAD - Max = 3 This is the currency of the transaction.
+ dupCheck: true (boolean) - This validates that this request is not a duplicate. A request is considered a duplicate if the merchantRefNum has already been used in a previous request within the past 90 days.
+ status (statusAttributes) - This is the status of the transaction request.
+ description: Purchase Credit - This is a description of the transaction, provided by the merchant. length<=255
+ customerIp: 204.91.0.12 -This is the customer's IP address.length<=39

## RefundResponse (object)
+ id: 25f6dadf-176a-415f-95c9-6ff39ff697ba - Read Only, length<=36    This is the ID returned in the response. This ID can be used for future associated requests, e,g., Refunds.
+ merchantRefNum: P1234 (required) - length<=255 This is the merchant reference number created by the merchant and submitted as part of the request.
+ amount: 100 (required) - max=99999999999 This is the amount of the request, in minor units.
+ dupCheck: true (boolean) - This validates that this request is not a duplicate. A request is considered a duplicate if the merchantRefNum has already been used in a previous request within the past 90 days.
+ childAccountNum : `length <= 10` -This is the child merchant account number. It is returned only if the transaction was processed via a master account.
+ txnTime : `date` - This is the date and time the transaction was processed.For example, 2018-11-27T09:12:11Z
+ status (statusAttributes) - This is the status of the transaction request.
+ error(errorAttributes) - Details of the error.
+ splitPay (splitpayAttributes) - NOTE: For splitpay transactions only.
        An array containing the linked accounts and the amount shared with each. You must include either amount or percent. However, you cannot include both values.
+ riskReasonCode (array) - An array of integers is returned, displaying the detailed risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.        


## SettlementResponse (object)
+ id: 25f6dadf-176a-415f-95c9-6ff39ff697ba - Read Only, length<=36    This is the ID returned in the response. This ID can be used for future associated requests, e,g., Refunds.
+ merchantRefNum: P1234 (required) - length<=255 This is the merchant reference number created by the merchant and submitted as part of the request.
+ amount: 100 (required) - max=99999999999 This is the amount of the request, in minor units.
+ dupCheck: true (boolean) - This validates that this request is not a duplicate. A request is considered a duplicate if the merchantRefNum has already been used in a previous request within the past 90 days.
+ availableToRefund (number) -This is the amount of of the Authorization remaining to refund, in minor units.
+ childAccountNum : `length <= 10` -This is the child merchant account number. It is returned only when the transaction is processed via a master account.
+ status (statusAttributes) - This is the status of the transaction request.
+ error(errorAttributes) - Details of the error.
+ splitPay (splitpayAttributes) - NOTE: For splitpay transactions only.
        An array containing the linked accounts and the amount shared with each. You must include either amount or percent. However, you cannot include both values.

## voidAuthResponse (object)
+ id: 25f6dadf-176a-415f-95c9-6ff39ff697ba - Read Only, length<=36    This is the ID returned in the response.
+ merchantRefNum: P1234 (required) - length<=255 This is the merchant reference number created by the merchant and submitted as part of the request.
+ amount: 100 (required) - max=99999999999 This is the amount of the request, in minor units.
+ status (statusAttributes) -  This is the status of the transaction.

## VerificationResponse (object)
+ id: `length <= 36` - This is the ID returned in the response. This ID can be used for looking up a Verification request.
+ paymentHandleToken: `length <= 36` - This is the payment handle token for which verification has to be done.
+ merchantRefNum: `length <= 255` - This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.
+ customerIp - length<=39 This is the customer's IP address.
+ dupCheck: true (boolean) - This validates that this request is not a duplicate. A request is considered a duplicate if the merchantRefNum has already been used in a previous request within the past 90 days.
+ description: `length<=255` -This is a description of the transaction, provided by the merchant.
+ txnTime : `date` - This is the date and time the transaction was processed.For example, 2018-11-27T09:12:11Z
+ currencyCode: CAD - Max = 3 This is the currency of the merchant account, e.g., USD or CAD, returned in the request response.
+ status (statusAttributes) - This is the status of the transaction request.
+ gatewayResponse(gatewayRequest) - This is the raw response returned by an acquirer. It is returned only if your account is configured accordingly.
+ error(errorAttributes) - Details of the error.
+ riskReasonCode (array) - An array of integers is returned, displaying the detailed risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.

# Group Payment Methods

## Fetch Available Payment Methods [/v1/paymentmethods]

### Payment Methods [GET /v1/paymentmethods?currencyCode={currencyCode}]

Click on **Fetch Available Payment Methods** above to see how to get the list of all available payment methods that are enabled for your account. 

+ Parameter

    + currencyCode  :`USD` - Available payment methods will be filtered based on currency code provided. If this parameter is not provided API will return all the payment methods for different currencies.
    
+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)

    + Body

            {
                "paymentMethods": [
                {
                  "paymentMethod": "CARD",
                  "currency": "USD",
                  "accountId": 1009355920
                },
                {
                  "paymentMethod": "SKRILL",
                  "currency": "USD",
                  "accountId": 1009355921
                },
                {
                  "paymentMethod": "NETELLER",
                  "currency": "USD",
                  "accountId": 1009355923
                }
              ]
            }
            

# Group Payment Handles

## Payment Handle [/v1/paymenthandles]

### Create Payment Handle [POST]

Click on **Create Payment Handle** above to see four examples of a Payment Handle request:

- Create Payment Handle for non-3DS Card Payments
- Create Payment Handle for 3DS Card Payments
- Create Payment Handle for Standalone Credits or Original Credits
- Create Payment Handle for Card Verifications

    

+ Request Card payment handle creation without 3DS (application/json)

    + Attributes (PaymentHandleRequest)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
   
    
    + Body

            {
              "merchantRefNum": "merchantRefNum-101",
              "transactionType": "PAYMENT",
              "card": {
                "cardNum": "5191330000004415",
                "cardExpiry": {
                  "month": 10,
                  "year": 2020
                },
                "cvv": "111",
                "holderName": "poorna"
              },
              "paymentType": "CARD",
              "amount": 190,
              "currencyCode": "GBP",
              "customerIp": "172.0.0.1",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "zip": "M5H 2N2",
                "country": "CA"
              },
              "returnLinks": [
                {
                  "rel": "on_completed",
                  "href": "https://usgaminggamblig.com/payment/return/success",
                  "method": "GET"
                },
                {
                  "rel": "on_failed",
                  "href": "https://usgaminggamblig.com/payment/return/failed",
                  "method": "GET"
                }
              ]
            }

+ Response 200 (application/json)

    + Body

            {
              "id": "26359efd-7cfb-4014-a13d-1724e3ff17fa",
              "amount": 190,
              "merchantRefNum": "merchantRefNum-101",
              "action": "NONE",
              "currencyCode": "GBP",
              "usage": "SINGLE_USE",
              "status": "PAYABLE",
              "paymentType": "CARD",
              "executionMode": "SYNCHRONOUS",
              "customerIp": "172.0.0.1",
              "paymentHandleToken": "SCO3wKcIyLoQbQvw",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H 2N2"
              },
              "card": {
                "cardExpiry": {
                  "month": "10",
                  "year": "2020"
                },
                "holderName": "poorna",
                "cardType": "MC",
                "cardBin": "519133",
                "lastDigits": "4415"
              },
              "returnLinks": [
                {
                  "rel": "on_completed",
                  "href": "https://usgaminggamblig.com/payment/return/success",
                  "method": "GET"
                },
                {
                  "rel": "on_failed",
                  "href": "https://usgaminggamblig.com/payment/return/failed",
                  "method": "GET"
                }
              ],
              "timeToLiveSeconds": 299,
              "transactionType": "PAYMENT"
            }

+ Request CARD Payment Handle with 3DS enabled (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Body

            {
              "merchantRefNum": "merchantRefNum-124",
              "transactionType": "PAYMENT",
              "card": {
                "cardNum": "4538261230000003",
                "cardExpiry": {
                  "month": 10,
                  "year": 2020
                },
                "cvv": "111",
                "holderName": "poorna"
              },
              "paymentType": "CARD",
              "amount": 3000,
              "currencyCode": "GBP",
              "customerIp": "172.0.0.1",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "zip": "M5H 2N2",
                "country": "CA"
              },
              "returnLinks": [
                {
                  "rel": "on_completed",
                  "href": "https://usgaminggamblig.com/payment/return/success",
                  "method": "GET"
                },
                {
                  "rel": "on_failed",
                  "href": "https://usgaminggamblig.com/payment/return/failed",
                  "method": "GET"
                }
              ]
            }

+ Response 200 (application/json)

    + Body

            {
              "id": "372b5ee7-6360-4403-b444-164f8f1d2709",
              "amount": 3000,
              "merchantRefNum": "merchantRefNum-124",
              "action": "REDIRECT",
              "currencyCode": "GBP",
              "usage": "SINGLE_USE",
              "status": "INITIATED",
              "paymentType": "CARD",
              "executionMode": "SYNCHRONOUS",
              "customerIp": "172.0.0.1",
              "paymentHandleToken": "SCyGZDlUuZ9zxjyd",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H 2N2"
              },
              "card": {
                "cardExpiry": {
                  "month": "10",
                  "year": "2020"
                },
                "holderName": "poorna",
                "cardType": "VI",
                "cardBin": "453826",
                "lastDigits": "0003"
              },
              "returnLinks": [
                {
                  "rel": "on_completed",
                  "href": "https://usgaminggamblig.com/payment/return/success",
                  "method": "GET"
                },
                {
                  "rel": "on_failed",
                  "href": "https://usgaminggamblig.com/payment/return/failed",
                  "method": "GET"
                },
                {
                  "rel": "payment_redirect",
                  "href": "http://api.paysafe.com/cardadapter/v1/card/redirect/372b5ee7-6360-4403-b444-164f8f1d2709",
                  "method": "GET"
                }
              ],
              "timeToLiveSeconds": 299,
              "transactionType": "PAYMENT"
            }

+ Request Create payment handle for STANDALONE_CREDIT or ORIGINAL_CREDIT using non-3ds or 3ds cards (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Body

            {
              "merchantRefNum": "merchantRefNum-190",
              "transactionType": "STANDALONE_CREDIT",
              "card": {
                "cardNum": "4538261230000003",
                "cardExpiry": {
                  "month": 10,
                  "year": 2020
                },
                "cvv": "111",
                "holderName": "poorna"
              },
              "paymentType": "CARD",
              "amount": 3000,
              "currencyCode": "GBP",
              "customerIp": "172.0.0.1",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "zip": "M5H 2N2",
                "country": "CA"
              }
            }

+ Response 200 (application/json)

    + Body

            {
              "id": "372b5ee7-6360-4403-b444-164f8f1d2709",
              "amount": 3000,
              "merchantRefNum": "merchantRefNum-190",
              "action": "NONE",
              "currencyCode": "GBP",
              "usage": "SINGLE_USE",
              "status": "PAYABLE",
              "paymentType": "CARD",
              "executionMode": "SYNCHRONOUS",
              "customerIp": "172.0.0.1",
              "paymentHandleToken": "SCyGZDlUuZ9zxjyd",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H 2N2"
              },
              "card": {
                "cardExpiry": {
                  "month": "10",
                  "year": "2020"
                },
                "holderName": "poorna",
                "cardType": "VI",
                "cardBin": "453826",
                "lastDigits": "0003"
              },
              "timeToLiveSeconds": 299,
              "transactionType": "STANDALONE_CREDIT"
            }
            
+ Request Create payment handle of transaction type VERIFICATION without amount (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Body

            {
              "merchantRefNum": "merchantRefNum-196",
              "transactionType": "VERIFICATION",
              "card": {
                "cardNum": "4107857757053670",
                "cardExpiry": {
                  "month": 12,
                  "year": 2034
                },
                "cvv": "222"
              },
              "paymentType": "CARD",
              "currencyCode": "GBP",
              "customerIp": "172.0.0.1",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "zip": "M5H 2N2",
                "country": "CA"
              }
            }

+ Response 200 (application/json)

    + Body

            {
              "id": "16113177-3d68-4c91-8f69-ce41903f1446",
              "merchantRefNum": "merchantRefNum-196",
              "action": "NONE",
              "currencyCode": "GBP",
              "usage": "SINGLE_USE",
              "status": "PAYABLE",
              "timeToLiveSeconds": 299,
              "transactionType": "VERIFICATION",
              "paymentType": "CARD",
              "executionMode": "SYNCHRONOUS",
              "customerIp": "172.0.0.1",
              "paymentHandleToken": "SCfZX0QEvEvSszKy",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H 2N2"
              },
              "card": {
                "cardExpiry": {
                  "month": "12",
                  "year": "2034"
                },
                "cardType": "VI",
                "cardBin": "410785",
                "lastDigits": "3670"
              }
            }

### Get Payment Handle [GET /v1/paymenthandles/{paymenthandle_id}]

Click on **Get Payment Handle** above to see how to look up a Payment Handle request using the ID returned in the response to the original request.

+ Parameter

 + paymenthandle_id : `26359efd-7cfb-4014-a13d-1724e3ff17fa` - This is the ID returned in the response to the Payment handle request.

+ Response 200 (application/json)

    + Body

            {
              "id": "26359efd-7cfb-4014-a13d-1724e3ff17fa",
              "amount": 1900,
              "merchantRefNum": "merchantRefNum-115",
              "action": "NONE",
              "currencyCode": "GBP",
              "usage": "SINGLE_USE",
              "status": "EXPIRED",
              "timeToLiveSeconds": 0,
              "transactionType": "PAYMENT",
              "paymentType": "CARD",
              "executionMode": "SYNCHRONOUS",
              "customerIp": "172.0.0.1",
              "paymentHandleToken": "SC0YsGIIgFksiOsQ",
              "paymentToken": "SC0YsGIIgFksiOsQ",
              "billingDetails": {
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H 2N2"
              },
              "card": {
                "cardExpiry": {
                  "month": "12",
                  "year": "2034"
                },
                "holderName": "poorna",
                "cardType": "MC",
                "cardBin": "519133",
                "lastDigits": "4415"
              },
              "returnLinks": [
                {
                  "rel": "on_completed",
                  "href": "https://usgaminggamblig/payment/return/success",
                  "method": "GET"
                },
                {
                  "rel": "on_failed",
                  "href": "https://usgaminggamblig/payment/return/failed",
                  "method": "GET"
                }
              ]
            }

### Get Payment Handles by Merchant Reference Number [GET /v1/paymenthandles?merchantRefNum={merchant_ref_num}]

Click on **Get Payment Handles by Merchant Reference Number** above to see how to look up a Payment Handle using the merchant reference number used in the original request.

+ Parameter

    + merchant_ref_num : `13995817730005389` - This is the merchant reference number provided in the request while creating payment handle.

+ Response 200 (application/json)

    + Body

            {
              "paymenthandles": [{
              "id": "cc719995-59ed-4146-a936-b54db72bcaa8",
              "amount": 1900,
              "merchantRefNum": "merchantRefNum-130",
              "action": "NONE",
              "currencyCode": "GBP",
              "usage": "SINGLE_USE",
              "status": "EXPIRED",
              "timeToLiveSeconds": 0,
              "transactionType": "PAYMENT",
              "paymentType": "CARD",
              "executionMode": "SYNCHRONOUS",
              "customerIp": "172.0.0.1",
              "paymentHandleToken": "SC0YsGIIgFksiOsQ",
              "billingDetails": {
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H 2N2"
              },
              "card": {
                "cardExpiry": {
                  "month": "12",
                  "year": "2034"
                },
                "holderName": "poorna",
                "cardType": "MC",
                "cardBin": "519133",
                "lastDigits": "4415"
              },
              "returnLinks": [
                {
                  "rel": "on_completed",
                  "href": "https://usgaminggamblig/payment/return/success",
                  "method": "GET"
                },
                {
                  "rel": "on_failed",
                  "href": "https://usgaminggamblig/payment/return/failed",
                  "method": "GET"
                }
              ]
            }}

# Group Payments

## Payments [/v1/payments]

Payments is used to authorize an amount. The authorized amount must be settled in a subsequent settlement transaction.
For Purchase requests. i.e., requests which authorizes and settles in the same request, set the settleWithAuth  parameter to true.

### Create Payment with Payment Handle Token [POST]

Click on **Payments** above to see two examples of a Payment request:
- A Payment request that will have to be settled later
- A Payment request, which authorizes and settles the payment in a single request by setting the settleWithAuth parameter to true


+ Request Card Payment with Payment Handle (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Attributes (PaymentsRequest)
    
    + Body

            {
              "merchantRefNum": "merchantRefNum-108",
              "amount": 190,
              "currencyCode": "GBP",
              "dupCheck": true,
              "settleWithAuth": false,
              "paymentHandleToken": "SCZJg09GWSv36NLB",
              "customerIp": "10.10.12.64",
              "description": "Magazine subscription"
            }
            
+ Response 200 (application/json)

    + Body

            {
              "id": "3aeb9c63-6386-46a3-9f8e-f452e722228a",
              "amount": 190,
              "merchantRefNum": "merchantRefNum-108",
              "settleWithAuth": false,
              "paymentHandleToken": "SCZJg09GWSv36NLB",
              "txnTime": "2018-12-09T11:05:24+0000",
              "customerIp": "10.10.12.64",
              "dupCheck": true,
              "description": "Magazine subscription",
              "currencyCode": "GBP",
              "status": "COMPLETED",
              "availableToSettle": 1900,
              "gatewayResponse": {
                "authCode": "135880",
                "avsResponse": "MATCH",
                "cvvVerification": "MATCH"
              },
              "merchantDescriptor": {
                "dynamicDescriptor": "54321",
                "phone": "333-123456789"
              }
            }

### Get Payments [GET /v1/payments/{payment_id}]

Click on **Get Payments** above to see how to look up a Payments request using the ID returned in the response to the original request.

+ Parameter

   + payment_id : `3aeb9c63-6386-46a3-9f8e-f452e722228a` - This is the ID returned in the response to the Payments request.

+ Response 200 (application/json)

    + Body

            {
              "id": "3aeb9c63-6386-46a3-9f8e-f452e722228a",
              "amount": 190,
              "merchantRefNum": "merchantRefNum-108",
              "settleWithAuth": false,
              "paymentHandleToken": "SCZJg09GWSv36NLB",
              "txnTime": "2018-12-09T11:05:24+0000",
              "customerIp": "10.10.12.64",
              "dupCheck": true,
              "description": "Magazine subscription",
              "currencyCode": "GBP",
              "status": "COMPLETED",
              "availableToSettle": 1900,
              "gatewayResponse": {
                "authCode": "135880",
                "avsResponse": "MATCH",
                "cvvVerification": "MATCH"
              },
              "merchantDescriptor": {
                "dynamicDescriptor": "54321",
                "phone": "333-123456789"
              }
            }
            
### Get Payments by Merchant Reference number [GET /v1/payments?merchantRefNum={merchant_ref_num}]

Click on **Get Payments by Merchant Reference Number** above to see how to look up a Payment using the merchant reference number used in the original request.


+ Parameter

   + merchant_ref_num : `merchantRefNum-108` -This is the merchant reference number created by the merchant and submitted as part of the request.

+ Response 200 (application/json)

    + Body

            {
              "payments": [
                {
              "id": "3aeb9c63-6386-46a3-9f8e-f452e722228a",
              "amount": 190,
              "merchantRefNum": "merchantRefNum-108",
              "settleWithAuth": false,
              "paymentHandleToken": "SCZJg09GWSv36NLB",
              "txnTime": "2018-12-09T11:05:24+0000",
              "customerIp": "10.10.12.64",
              "dupCheck": true,
              "description": "Magazine subscription",
              "currencyCode": "GBP",
              "status": "COMPLETED",
              "availableToSettle": 1900,
              "gatewayResponse": {
                "authCode": "135880",
                "avsResponse": "MATCH",
                "cvvVerification": "MATCH"
              },
              "merchantDescriptor": {
                "dynamicDescriptor": "54321",
                "phone": "333-123456789"
              }
            }
              ]
            }

# Group Void Authorizations 

## Void Authorizations [ ]
Void Authorization allow merchants to cancel/void a Payment.

### Void an Authorization [POST /v1/payments/{PAYMENT_ID}/voidauths]

Click on **Void an Authorization** above to see how to submit a Void Authorization request. You can void an Authorization **only if** it has not yet been settled.

+ Parameter

    + PAYMENT_ID : `86dcb68d-cbd0-4878-8da7-ffc0e6554513` - This is the ID returned in the response to the Payment request.
    
+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Attributes (voidAuthResponse)
            
    + Body

            {
              "amount": 900,
              "merchantRefNum": "13915817720025003"
            }
     
+ Response 200 (application/json)

    + Body

            {
              "id": "50175d73-be3d-4594-b570-9095a17121de",
              "merchantRefNum": "13915817720025003",
              "amount": 900,
              "txnTime": "2018-12-10T11:00:53+0000",
              "status": "COMPLETED"
            }

### Get Void Authorization [GET /v1/voidauths/{VOID_AUTH_ID}]

Click on **Get Void Authorization** above to see how to look up a Void Authorization request using the ID returned in the response to the original request.

+ Parameter

   + VOID_AUTH_ID : `86dcb68d-cbd0-4878-8da7-ffc0e6554513` - This is the ID returned in the response to the void authorisation request.


+ Response 200 (application/json)

    + Body

            {
              "id": "65bb2b2e-be2f-4ae8-9a2a-f24239309c7d",
              "merchantRefNum": "1391581772002515624",
              "amount": 900,
              "txnTime": "2018-12-10T11:17:23Z",
              "status": "COMPLETED"
            }
            
### Get Void Authorization Using Merchant Reference Number [GET /v1/voidauths?merchantRefNum={MERCHANT_REF_NUM}]

Click on **Get Void Authorization Using Merchant Reference Number** above to see how to look up a Void Authorization request using the merchant reference number used in the original request.

+ Parameter

   + MERCHANT_REF_NUM : 1391581772002515624 - This is the merchant reference number created by the merchant and submitted as part of the request. 

+ Response 200 (application/json)
  
   + Body

            {
              "voidAuths": [
                {
                  "id": "65bb2b2e-be2f-4ae8-9a2a-f24239309c7d",
                  "merchantRefNum": "1391581772002515624",
                  "amount": 900,
                  "txnTime": "2018-12-10T11:17:23Z",
                  "status": "COMPLETED"
                }
              ]
            }

# Group Settlements 

## Settlements [/v1/payments/{payment_id}/settlements]

+ Parameter

    + payment_id : `c64ecbf2-a942-4f7c-b412-70217a0eb16e` - This is the ID returned in the response to the Payments request.

### Settlement [POST]
Click on **Settlement** above to see three examples of a Settlement request:

- A regular Settlement, where the initial request was a Payment that now has to be settled
- A partial Settlement, where only part of the initial Payment is settled, leaving the balance to be settled later
- A Settlement that is split into multiple merchant accounts, for merchant accounts that are configured to do so

+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Attributes(SettlementResponse)
    
    + Body

            {
              "merchantRefNum": "merchantRefNum-117",
              "amount": 190
            }
                        
+ Response 200 (application/json)

    + Body

            {
              "merchantRefNum": "merchantRefNum-117",
              "amount": 190,
              "id": "a07b0597-f106-4790-9661-f0d452619f5d",
              "availableToRefund": 190,
              "txnTime": "2018-12-09T10:56:36+0000",
              "status": "PENDING"
            }
            

### Cancel a Settlement [PUT /v1/settlement/{settlement_id}]

Click on **Cancel a Settlement** above to see how to submit a Cancel Settlement request for Payments that are yet to be settled

+ Parameter

    + settlement_id : `d9bcfd85-8aa6-469d-80a3-e2ca196544da` - This is the ID returned in the response to the Settlement request. 

+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "status": "CANCELLED"
            }
                        
+ Response 200 (application/json)

    + Body

            {
              "id": "ea49ab6c-cf9b-4efd-bde8-2fa3bb5ccd85",
              "txnTime": "2018-12-09T11:17:29+0000",
              "status": "CANCELLED"
            }
            

### Get Settlements [GET /v1/settlements/{settlement_id}]

Click on **Get Settlements** above to see how to look up a Settlements request using the ID returned in the response to the original request.

+ Parameter

   + settlement_id : `ea49ab6c-cf9b-4efd-bde8-2fa3bb5ccd85` - This is the ID returned in the response to the Payments request.

+ Response 200 (application/json)

    + Body

            {
              "merchantRefNum": "merchantRefNum-144",
              "amount": 40,
              "id": "ea49ab6c-cf9b-4efd-bde8-2fa3bb5ccd85",
              "availableToRefund": 40,
              "txnTime": "2018-12-09T10:56:36+0000",
              "status": "PENDING"
            }
            
### Get Settlements by Merchant Reference number [GET /v1/settlements?merchantRefNum={merchant_ref_num}]

Click on **Get Settlement Using Merchant Reference Number** above to see how to look up a Settlement using the merchant reference number used in the original request.

+ Parameter

   + merchant_ref_num : `merchantRefNum-144` -This is the merchant reference number created by the merchant and submitted as part of the request.

+ Response 200 (application/json)

    + Body

            {
              "settlements": [
                {
                  "merchantRefNum": "merchantRefNum-144",
                  "amount": 40,
                  "id": "ea49ab6c-cf9b-4efd-bde8-2fa3bb5ccd85",
                  "availableToRefund": 40,
                  "txnTime": "2018-12-09T10:56:36+0000",
                  "status": "PENDING"
                }
              ]
            }

# Group Refunds

## Refunds [/v1/settlements/{settlement_id}/refunds]

The settlement transaction can be refunded using the API

+ Parameter

    + settlement_id : `d9bcfd85-8aa6-469d-80a3-e2ca196544da`

### Refund [POST]

Click on Refund above to see how to submit a Refund request for an already settled payment

+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Attributes(RefundResponse)
    
    + Body

            {
              "merchantRefNum": "merchantRefNum-118",
              "amount": 190,
              "dupCheck": true
            }
                        
+ Response 200 (application/json)

    + Body
            
            {
              "id": "c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725",
              "merchantRefNum": "merchantRefNum-118",
              "amount": 190,
              "txnTime": "2018-12-09T11:41:09+0000",
              "status": "PENDING"
            }
            
### Cancel a Refund [PUT /v1/refunds/{refund_id}]

Click on **Cancel a Refund** above to see how to submit a Cancel Refund request.

+ Parameter

    + refund_id : `c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725` - This is the ID returned in the response to the Refund request
    
+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "status": "CANCELLED"
            }
                        
+ Response 200 (application/json)

    + Body

            {
              "id": "c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725",
              "txnTime": "2018-12-10T11:19:51Z",
              "status": "CANCELLED"
            }
            
### Get Refund [GET /v1/refunds/{refund_id}]

Click on **Get Refunds** above to see how to look up a Refunds request using the ID returned in the response to the original request.

+ Parameter

    + refund_id : `c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725` - This is the ID returned in the response to the Refund request

+ Response 200 (application/json)

    + Body

            {
              "id": "c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725",
              "merchantRefNum": "merchantRefNum-118",
              "amount": 190,
              "txnTime": "2018-12-09T11:41:09+0000",
              "status": "PENDING"
            }
            
### Get Refunds by Merchant Reference number [GET /v1/refunds?merchantRefNum={merchant_ref_num}]

Click on **Get Refunds Using Merchant Reference Number** above to see how to look up a Refund using the merchant reference number used in the original request.

+ Parameter

   + merchant_ref_num : `merchantRefNum-118` -This is the merchant reference number created by the merchant and submitted as part of the request.

+ Response 200 (application/json)

    + Body

            {
              "refunds": [
                {
                  "id": "c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725",
                  "merchantRefNum": "merchantRefNum-118",
                  "amount": 190,
                  "txnTime": "2018-12-09T11:41:09+0000",
                  "status": "PENDING"
                }
              ]
            }
         
# Group Standalone Credits 

## Standalone Credits [/v1/standalonecredits]

Standalone Credits allow merchants to issue credits to cardholders without requiring a previous Payment/Settlement.

**Note:** If your merchant category code (MCC) is listed as able to [process Original Credits](#reference/original-credits/post-standalone-credit), you must not use Standalone Credits.

### Standalone Credit [POST]

Click on **Standalone Credit** above to see how to submit a Standalone Credit with Payment Handle Token


+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Attributes (OriginalCreditResponse)
    
    + Body

            {
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "currencyCode": "GBP",
              "paymentHandleToken": "SC9mbfZSITB5OwDJ",
              "customerIp": "204.91.0.12",
              "description": "Winning payment from Loto 649"
            }    
            
+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "paymentHandleToken": "SC9mbfZSITB5OwDJ",
              "customerIp": "204.91.0.12",
              "currencyCode": "GBP",
              "status": "PENDING",
              "description": "Winning payment from Loto 649"
            }
            
### Cancel Standalone Credit [PUT /v1/standalonecredits/{standalone_credit_id}]

Click on **Cancel a Standalone Credit** above to see how to submit a Cancel Standalone Credit request.

+ Parameter

    + standalone_credit_id : This is the ID returned in the response to the Standalone Credit request. Example: 86dcb68d-cbd0-4878-8da7-ffc0e6554513.
    

+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "status": "CANCELLED"
            }


+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "status": "CANCELLED"
            }
            

### Get Standalone Credit [GET /v1/standalonecredits/{standalone_credit_id}]

Click on **Get Standalone Credit** above to see how to look up a Standalone Credit request using the ID returned in the response to the original request.

+ Parameter

    + standalone_credit_id : This is the ID returned in the response to the Standalone Credit request. Example: 86dcb68d-cbd0-4878-8da7-ffc0e6554513.

+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "paymentHandleToken": "SC9mbfZSITB5OwDJ",
              "customerIp": "204.91.0.12",
              "currencyCode": "GBP",
              "status": "PENDING",
              "description": "Winning payment from Loto 649"
            }
            
### Get Standalone Credit Using Merchant Reference Number  [GET /v1/standalonecredits?merchantRefNum={merchantRefNum}]

Click on **Get Standalone Credit Using Merchant Reference Number** above to see how to look up a Standalone Credit using the merchant reference number used in the original request.

+ Parameter

   + merchantRefNum : merchantRefNum-151 - This is the merchant reference number created by the merchant and submitted as part of the request. 

+ Response 200 (application/json)

    + Body

            {
              "standaloneCredits": [
                {
                  "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
                  "amount": 40,
                  "merchantRefNum": "merchantRefNum-151",
                  "paymentHandleToken": "SC9mbfZSITB5OwDJ",
                  "customerIp": "204.91.0.12",
                  "currencyCode": "GBP",
                  "status": "PENDING",
                  "description": "Winning payment from Loto 649"
                }
              ]
            }
            


# Group Original Credits 

## Original Credits [/v1/originalcredits]

Original Credits allow merchants with specific merchant category codes (MCCs) to issue winnings as credits to cardholders, without requiring a previous Payment/Settlement.

Merchants with the following MCCs can process Original Credits:

- 4829
- 6012
- 6051
- 6211
- 6540
- 7299
- 7994
- 7995
- 8999

### Original Credit [POST]

Click on **Original Credit** above to see how to submit a Original Credit using Payment Handle Token.

+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Attributes (OriginalCreditResponse)
    
    + Body

            {
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "currencyCode": "GBP",
              "paymentHandleToken": "SC9mbfZSITB5OwDJ",
              "customerIp": "204.91.0.12",
              "description": "Winning payment from Loto 649"
            }
     
+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "paymentHandleToken": "SC9mbfZSITB5OwDJ",
              "customerIp": "204.91.0.12",
              "currencyCode": "GBP",
              "status": "PENDING",
              "description": "Winning payment from Loto 649"
            }

### Cancel an Original Credit [PUT /v1/originalcredits/{original_credit_id}]

Click on **Cancel an Original Credit** above to see how to submit a Cancel Original Credit request.

+ Parameter

   + original_credit_id : `86dcb68d-cbd0-4878-8da7-ffc0e6554513` - This is the ID returned in the response to the Original Credit request. Example: 86dcb68d-cbd0-4878-8da7-ffc0e6554513.

+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "status": "CANCELLED"
            }


+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "status": "CANCELLED"
            }
            

### Get Original Credit [GET /v1/originalcredits/{original_credit_id}]

Click on **Get Original Credit** above to see how to look up an Original Credit request using the ID returned in the response to the original request.

+ Parameter

   + original_credit_id : `86dcb68d-cbd0-4878-8da7-ffc0e6554513` - This is the ID returned in the response to the Original Credit request. Example: 86dcb68d-cbd0-4878-8da7-ffc0e6554513.


+ Response 200 (application/json)

    + Body

            {
              "id": "86dcb68d-cbd0-4878-8da7-ffc0e6554513",
              "merchantRefNum": "13995817730005399",
              "txnTime": "2017-07-06T19:59:17Z",
              "status": "PENDING",
              "amount": 1000,
              "paymentHandleToken": "SC9mbfZSITB5OwDJ",
              "customerIp": "204.91.0.12",
              "description": "Winning payment from Loto",
              "currencyCode": "CAD"
            }
            
### Get Original Credit Using Merchant Reference Number [GET /v1/originalcredits?merchantRefNum={merchantRefNum}]

Click on **Get Original Credit Using Merchant Reference Number** above to see how to look up an Original Credit request using the merchant reference number used in the original request.

+ Parameter

   + merchantRefNum : merchantRefNum-151 - This is the merchant reference number created by the merchant and submitted as part of the request. 

+ Response 200 (application/json)
  
   + Body

            {
              "originalCredits": [
                {
                  "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
                  "amount": 40,
                  "merchantRefNum": "merchantRefNum-151",
                  "paymentHandleToken": "SC9mbfZSITB5OwDJ",
                  "customerIp": "204.91.0.12",
                  "currencyCode": "GBP",
                  "status": "PENDING",
                  "description": "Winning payment from Loto 649"
                }
              ]
            }
            
# Group Verifications 

Verification allows merchants to validate a credit card without charging any amount on the card. 

### Verification [POST /v1/verifications]

- Click on Verification above to see how to submit a Verification request.

+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Attributes (VerificationResponse)
            
    + Body

            {
              "paymentHandleToken": "SCUgzJL5jlRIKCiX",
              "merchantRefNum": "20095817730019123",
              "customerIp": "10.10.12.64",
              "dupCheck": false,
              "description": "Some description"
            }
     
+ Response 200 (application/json)

    + Body

            {
              "id": "71aea8ae-e801-4df3-9436-c5a61c88d3ad",
              "paymentHandleToken": "SCUgzJL5jlRIKCiX",
              "merchantRefNum": "20095817730019123",
              "customerIp": "10.10.12.64",
              "currencyCode": "USD",
              "description": "Some description",
              "txnTime": 1544444372000,
              "gatewayResponse" : {
              "authCode": "XXXXXX",
              "avsResponse" : "MATCH",
              "cvvVerification": "NOT_PROCESSED"
              },
              "status": "COMPLETED"
            }

### Get Verification [GET /v1/verifications/{VERIFICATION_ID}]

Click on **Get Verification** above to see how to look up a Verification request using the ID returned in the response to the original request.

+ Parameter

   + VERIFICATION_ID : `0c62a67c-e12e-4876-aa1a-20f9ec1f0352` - This is the ID returned in the response to the verification request.


+ Response 200 (application/json)

    + Body

            {
              "id": "71aea8ae-e801-4df3-9436-c5a61c88d3ad",
              "paymentHandleToken": "SCUgzJL5jlRIKCiX",
              "merchantRefNum": "20095817730019123",
              "customerIp": "10.10.12.64",
              "currencyCode": "USD",
              "description": "Some description",
              "txnTime": 1544444372000,
              "gatewayResponse" : {
              "authCode": "XXXXXX",
              "avsResponse" : "MATCH",
              "cvvVerification": "NOT_PROCESSED"
              },
              "status": "COMPLETED"
            }
            
### Get Verification Using Merchant Reference Number [GET /v1/verifications?merchantRefNum={MERCHANT_REF_NUM}]

Click on **Get Verification Using Merchant Reference Number** above to see how to look up a Verification request using the merchant reference number used in the original request.

+ Parameter

   + MERCHANT_REF_NUM : 20095817730019123 - This is the merchant reference number created by the merchant and submitted as part of the request. 

+ Response 200 (application/json)
  
   + Body

            {
              "verifications": [
                {
              "id": "71aea8ae-e801-4df3-9436-c5a61c88d3ad",
              "paymentHandleToken": "SCUgzJL5jlRIKCiX",
              "merchantRefNum": "20095817730019123",
              "customerIp": "10.10.12.64",
              "currencyCode": "USD",
              "description": "Some description",
              "txnTime": 1544444372000,
              "gatewayResponse" : {
              "authCode": "XXXXXX",
              "avsResponse" : "MATCH",
              "cvvVerification": "NOT_PROCESSED"
              },
              "status": "COMPLETED"
            }
              ]
            }